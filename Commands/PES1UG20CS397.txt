-- Creating Tables

--1)player table:

CREATE TABLE Player_397(Player_ID varchar(255) NOT NULL, Player_Name varchar(255), Position varchar(255), DOB DATE,Salary int,Team_ID varchar(255), PRIMARY KEY(Player_ID),FOREIGN KEY(Team_ID) REFERENCES Team_397(Team_ID));

--2)game player table:
CREATE TABLE Plays_397(Player_ID varchar(255),Game_ID varchar(255),FOREIGN KEY(Player_ID) REFERENCES Player_397(Player_ID),FOREIGN KEY(Game_ID) REFERENCES Game_397(Game_ID),CONSTRAINT game_player_unique UNIQUE (Player_ID, Game_ID));

--3)game table:

CREATE TABLE Game_397(Game_ID varchar(255) NOT NULL,Game_Name varchar(255), No_of_players_per_team int,No_of_teams_competing int,No_of_players_worldwide int,Creator varchar(255),PRIMARY KEY(Game_ID));

--4)revenue table:

CREATE TABLE Revenue_397(Revenue_ID varchar(255) NOT NULL,Source_name varchar(255), Income int,Team_ID varchar(255),PRIMARY KEY(Revenue_ID),FOREIGN KEY(Team_ID) REFERENCES Team_397(Team_ID));

--5)team table:

CREATE TABLE Team_397(Team_ID varchar(255) NOT NULL,Team_name varchar(255), No_of_players int,Owner_name varchar(255),Game_ID varchar(255),PRIMARY KEY(Team_ID),FOREIGN KEY(Game_ID) REFERENCES Game_397(Game_ID));

--6)competition table:

CREATE TABLE Competition_397(Competition_ID varchar(255),Competition_Name varchar(255), Location varchar(255),Prize_pool int,Organiser_name varchar(255),Game_ID varchar(255),PRIMARY KEY(Competition_ID),FOREIGN KEY(Game_ID) REFERENCES Game_397(Game_ID));

--7) team_competition table:
CREATE TABLE Participates_397(Team_ID varchar(255),Competition_ID varchar(255),FOREIGN KEY(Team_ID) REFERENCES Team_397(Team_ID),FOREIGN KEY(Competition_ID) REFERENCES competition_397(Competition_ID),CONSTRAINT team_competition_unique UNIQUE (Team_ID, Competition_ID));

-- Inserting Values

INSERT INTO game_397 (Game_ID,Game_name,Creator,No_of_players_per_team,No_of_teams_competing,No_of_players_worldwide) VALUES 
('RIOT_001','Valorant','Riot Games',5,2,700000),
('BLIZ_001','Overwatch 2','Blizzard',5,2,163000),
('RESP_001','Apex Legends','Panic Button Games',3,20,169000),
('EPIC_001','Fortnite','Epic Games',1,99,3000000),
('KRAF_001','PUBG','KRAFTON',4,16,30000000),
('VALV_001','CS:GO','VALVE Corporation',5,2,800000),
('RIOT_002','League of Legends','Riot Games',5,2,2300000),
('PSYO_001','Rocket League','Psyonix',3,2,6000000),
('VALV_002','Dota 2','VALVE Corporation',5,2,666000),
('NAMC_001','Tekken','NAMCO',1,1,5000);

-- Join Operations

-- Natural Join

SELECT Competition_Name,Game_Name,Prize_pool FROM competition_397 NATURAL JOIN game_397;

-- Inner Join

SELECT Game_Name,Creator FROM game_397 INNER JOIN competition_397 WHERE game_397.Game_ID = competition_397.Game_ID;

-- Left Outer Join

SELECT player_397.Player_Name,team_397.Team_Name FROM player_397 LEFT JOIN team_397 ON team_397.Team_ID = player_397.Team_ID;

-- Right Outer Join

 SELECT team_397.Team_Name,revenue_397.Source_name FROM revenue_397 RIGHT JOIN team_397 ON revenue_397.Team_ID = team_397.Team_ID;

-- Nested Join

SELECT player_397.Player_Name,Team_397.Team_Name,Competition_Name FROM participates_397 NATURAL JOIN competition_397 JOIN team_397 ON team_397.Team_ID = participates_397.Team_ID JOIN player_397 ON player_397.Team_ID = team_397.Team_ID;

-- Aggregate Functions

-- Count

SELECT COUNT(*) FROM revenue_397 WHERE revenue_397.Income>100000;

-- Average

SELECT AVG(revenue_397.Income) FROM revenue_397;

-- Minimum

SELECT MIN(player_397.Salary) FROM player_397;

-- Maximum

SELECT MAX(competition_397.Prize_pool) FROM competition_397;

-- Sum

SELECT SUM(player_397.Salary) FROM player_397;


--Set Operations

-- Union

SELECT revenue_397.Team_ID FROM revenue_397 UNION SELECT team_397.Team_ID FROM team_397;

-- Intersection

SELECT revenue_397.Team_ID FROM revenue_397 INTERSECT SELECT team_397.Team_ID FROM team_397;

-- Set difference

SELECT team_397.Team_ID FROM team_397 EXCEPT SELECT player_397.Team_ID FROM player_397;

-- Cross Join

SELECT player_397.player_name,team_397.team_name FROM player_397 CROSS JOIN team_397;

-- Functions and Procedures

-- Function

DELIMITER $$
CREATE FUNCTION tax_397(Income INT)
RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE tax INT;
	IF  Income <= 10000 THEN
		SET tax = 0.1*Income;
	ELSEIF Income > 10000 AND income <= 50000 THEN
		SET tax = 0.15*Income;
	ELSE
		SET tax = 0.25*Income;
	END IF;
	RETURN tax;
END; $$
DELIMITER ;

-- Procedure
DELIMITER $$

CREATE procedure age()

BEGIN

UPDATE player_397 SET Age = DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(),player_397.dob)), '%Y') + 0;

END; $$

DELIMITER ;

-- Triggers and Cursors

-- Trigger

DELIMITER $$
CREATE TRIGGER age_checks_397
BEFORE INSERT
ON player_397 FOR EACH ROW
BEGIN
DECLARE error_msg VARCHAR(50);
DECLARE age INT;
SET error_msg = "Not eligible to play as a professional.";
SELECT DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(),new.DOB)), '%Y') 
 + 0 INTO age;

IF age < 18 THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = error_msg;
END IF;
END $$
DELIMITER ;

-- Cursor

DELIMITER $$

CREATE FUNCTION Player_Finder ( In_Team_ID VARCHAR(50) )
RETURNS VARCHAR(50) READS SQL DATA

BEGIN

   DECLARE done INT DEFAULT FALSE;
   DECLARE PlayerName VARCHAR(50);

   DECLARE cursor_player CURSOR FOR
     SELECT Player_Name
     FROM player_397
     WHERE Team_ID = In_Team_ID;

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

   OPEN cursor_player;
   FETCH cursor_player INTO PlayerName;

   CLOSE cursor_player;

   RETURN PlayerName;

END; $$

DELIMITER ;